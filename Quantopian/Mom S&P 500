"""
This is a momentum strategy that buys top quintile of stocks in S&P 500 index. We can see a momentum crash happened on June 1, 2008. 
In the long run, the returns of the strategy are similar to S&P 500. 
"""
from quantopian.algorithm import attach_pipeline, pipeline_output
from quantopian.pipeline import Pipeline, CustomFactor
from quantopian.pipeline.data.builtin import USEquityPricing
from quantopian.pipeline.filters.morningstar import Q500US
 
def initialize(context):
    # Rebalance every month at the start.
    schedule_function(my_rebalance, date_rules.month_start())
         
    # Create our dynamic stock selector.
    attach_pipeline(make_pipeline(), 'my_pipeline')
         
def make_pipeline():
    
    base_universe = Q500US()
    momentum = Momentum()
    
    top_mom = momentum.percentile_between(80,100)
    
    pos_mom = momentum > 0
    
    buy_signal = top_mom & pos_mom
    
    return Pipeline(columns={
        'momentum':momentum,
        'top_mom':top_mom,
        'pos_mom':pos_mom,
        'buy_signal':buy_signal
    }, screen = base_universe
                   )

class Momentum(CustomFactor):
        
    inputs = [USEquityPricing.close]
    window_length = 252
    mask = Q500US()

    def compute(self, today, assets, out, close):
        out[:] = (((close[-1] - close[-252])/close[-252]) * 100)

     
def my_assign_weights(context):
    
    if len(context.longs)==0:
        long_weight = 0
    else:
        long_weight = 1.0 / len(context.longs)    
    
    return long_weight

def my_rebalance(context,data):
    context.output = pipeline_output('my_pipeline')
    context.longs = context.output[context.output['buy_signal']].index.tolist()
    context.long_weight = my_assign_weights(context)
    context.top_mom = context.output[context.output['top_mom']].index.tolist()
    
    #print(len(context.top_mom))
    
    for security in context.portfolio.positions:
        if security not in context.longs and data.can_trade(security):
            order_target_percent(security,0)
            
    for security in context.longs:
        if data.can_trade(security):
            order_target_percent(security,context.long_weight)
            
    record(num_of_stocks = len(context.top_mom))
        
        
        
        
        
